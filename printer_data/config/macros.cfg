#####################################################################
#   Macros
#####################################################################
[gcode_macro M900]
gcode:
	# Parameters
	{% set pa = params.K|float %}
	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro TEST_STARTUP]
gcode:
    G28
    #BED_MESH_CLEAR
    QUAD_GANTRY_LEVEL
    #CALIBRATE_Z
    #BED_MESH_CALIBRATE
    G90
    G0 x75 y25 z5

[gcode_macro Accel_Tuning_Prep]
gcode:
  SET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0
  SET_PRESSURE_ADVANCE ADVANCE=0
  TUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=7000 FACTOR=100 BAND=5

[gcode_macro Preheat_PLA]
gcode:
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=215
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=75

[gcode_macro Preheat_ABS]
gcode:
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=245
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110


[gcode_macro Work_On_ToolHead]
gcode:
    G0 X150 Y150 Z150 F7500

[gcode_macro Center_Toolhead]
gcode:
    G0 X150 Y150 Z5 F7500

[gcode_macro Calibrate_Z]
gcode:
    CALIBRATE_Z
    
[gcode_macro G32]
gcode:

    #BED_MESH_CLEAR
    #G28
    #CLEAN_NOZZLE
    QUAD_GANTRY_LEVEL
    G0  Y200 Z30 F3600
    G28
    
    
  
    #--------------------------------------------------------------------
[gcode_macro PURGE_LINE]
gcode:
  G90 # Use absolute coordinates
  G92 E0 # Reset extruder
  G1 Z2 F3000 # Move z up little to prevent scratching of surface
  G1 X20 Y5 Z0.2 F5000.0 # Move to start-line position
  G1 X280 Y5 Z0.2 F1000.0 E15  # Draw 1st line
  G1 X280 Y5.4 Z0.2 F5000.0 # Move to side a little
  G1 X65 Y5.4 Z0.2 F1500.0 E30  # Draw 2nd line
  G92 E0 # Reset extruder
  G1 Z1.0 F3000 # Move z up little to prevent scratching of surface




[gcode_macro PRINT_START]
  ## Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    G28
    G90
    G32                            ; home all axes
    G1 Z20 F3000                   ; move nozzle away from bed
 
    {% set bedtemp = params.BED_TEMP|int %} 
    {% set hotendtemp = params.NOZZLE_TEMP|int %} 
    M190 S{bedtemp} 
    M109 S{hotendtemp}
    CLEAN_NOZZLE
    #CALIBRATE_Z
    #CLEAN_NOZZLE
    #BED_MESH_CALIBRATE
    G0 X150 Y150 Z30 F3600
  


  
   
[gcode_macro PRINT_END]
   ##Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
#RETRACT 2mm
  
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 20} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    #BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[z_calibration]

## update these variable according to the documentation here https://github.com/protoloft/klipper_z_calibration
## you then should call CALIBRATE_Z as one of the last lines on your PRINT_START to set the Z offset dinamically

probe_nozzle_x: 209
probe_nozzle_y: 296
#   The X and Y coordinates (in mm) for clicking the nozzle on the
#   Z endstop. 
#(probe_switch_x should be minus 5mm from the probe_nozzle_x)
probe_switch_x: 204 #-5
#(probe_switch_y should be minus 10.5mm from the probe_nozzle_y)
probe_switch_y:  280 #-16 from probe_nozzle_y
#   The X and Y coordinates (in mm) for clicking the probe's switch
#   on the Z endstop.
probe_bed_x: 150
probe_bed_y:150
#   The X and Y coordinates (in mm) for probing on the print surface
#   (e.g. the center point) These coordinates will be adapted by the
#   probe's X and Y offsets. The default is the relative_reference_index
#   of the configured bed_mesh. It will raise an error if there is no
#   probe_bed site and no bed_mesh with a relative_reference_index
#   configured.
switch_offset: 0.53
#   The trigger point offset of the used klicky switch.
#   This needs to be fined out manually. More on this later
#   in this section..
max_deviation: 5
#   The maximum allowed deviation of the calculated offset.
#   If the offset exceeds this value, it will stop!
#   The default is 1.0 mm.
#samples: default from [probe] section
#   The number of times to probe each point. The probed z-values
#   will be averaged. The default is from the probe's configuration.
#samples_tolerance: default from [probe] section
#   The maximum Z distance (in mm) that a sample may differ from other
#   samples. The default is from the probe's configuration.
#samples_tolerance_retries: default from [probe] section
#   The number of times to retry if a sample is found that exceeds
#   samples_tolerance. The default is from the probe's configuration.
#samples_result: default from [probe] section
#   The calculation method when sampling more than once - either
#   "median" or "average". The default is from the probe's configuration.
#clearance: 10
#   The distance in mm to move up before moving to the next
#   position. The default is two times the z_offset from the probe's
#   configuration.
#position_min: 0
#   Minimum valid distance (in mm) used for probing move. The
#   default is from the Z rail configuration.
speed: 100 #was 100
#   The moving speed in X and Y. The default is 50 mm/s.
#lift_speed: 100
#   Speed (in mm/s) of the Z axis when lifting the probe between
#   samples and clearance moves. The default is from the probe's
#   configuration.
#probing_speed: default homing_speed from [stepper_z] section.
#   The fast probing speed (in mm/s) used, when probing_first_fast
#   is activated. The default is from the Z rail configuration.
#probing_second_speed: default second_homing_speed from [stepper_z] section.
#   The slower speed (in mm/s) for probing the recorded samples.
#   The default is second_homing_speed of the Z rail configuration.
#probing_retract_dist: default homing_retract_dist from [stepper_z] section.
#   Distance to backoff (in mm) before probing the next sample.
#   The default is homing_retract_dist from the Z rail configuration.
probing_first_fast: true
#   If true, the first probing is done faster by the probing speed.
#   This is to get faster down and the result is not recorded as a
#   probing sample. The default is false.

#start_gcode: Dock_Probe_Unlock
#   A list of G-Code commands to execute prior to each calibration command.
#   See docs/Command_Templates.md for G-Code format. This can be used to
#   attach the probe.
#before_switch_gcode: Attach_Probe
#   A list of G-Code commands to execute prior to each probing on the
#   mag-probe. See docs/Command_Templates.md for G-Code format. This can be
#   used to attach the probe after probing on the nozzle and before probing
#   on the mag-probe.
#end_gcode: Dock_Probe
end_gcode: Dock_Probe_Unlock
#   A list of G-Code commands to execute after each calibration command.
#   See docs/Command_Templates.md for G-Code format. This can be used to
#   detach the probe afterwards.

[gcode_macro CALIBRATE_Z]
rename_existing: BASE_CALIBRATE_Z
gcode:
    ATTACH_PROBE
    M117 Z-Calibration..
    BASE_CALIBRATE_Z
    M117

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.141250, 0.081250, 0.042500, 0.063750, 0.153750
#*# 	  0.113750, 0.023750, 0.028750, 0.042500, 0.145000
#*# 	  0.103750, 0.053750, 0.000000, 0.021250, 0.110000
#*# 	  0.181250, 0.048750, 0.026250, 0.030000, 0.153750
#*# 	  0.128750, 0.082500, 0.043750, 0.055000, 0.123750
#*# tension = 0.2
#*# min_x = 40.0
#*# algo = bicubic
#*# y_count = 5
#*# mesh_y_pps = 2
#*# min_y = 40.0
#*# x_count = 5
#*# max_y = 260.0
#*# mesh_x_pps = 2
#*# max_x = 260.0
#*#
#*# [bed_mesh Cold]
#*# version = 1
#*# points =
#*# 	  0.141250, 0.081250, 0.042500, 0.063750, 0.153750
#*# 	  0.113750, 0.023750, 0.028750, 0.042500, 0.145000
#*# 	  0.103750, 0.053750, 0.000000, 0.021250, 0.110000
#*# 	  0.181250, 0.048750, 0.026250, 0.030000, 0.153750
#*# 	  0.128750, 0.082500, 0.043750, 0.055000, 0.123750
#*# tension = 0.2
#*# min_x = 40.0
#*# algo = bicubic
#*# y_count = 5
#*# mesh_y_pps = 2
#*# min_y = 40.0
#*# x_count = 5
#*# max_y = 260.0
#*# mesh_x_pps = 2
#*# max_x = 260.0